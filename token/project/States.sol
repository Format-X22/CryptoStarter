pragma solidity ^0.4.16;

/**
 * @notice Часть контракта краудфайндинг-проекта,
 * отвечающая за систему состояний проекта.
 **/
contract IdeaStates {

    /**
     * @notice Варианты состояния проекта.
     **/
    enum States {

        // Изначальное состояние, проект ещё не активен,
        // проект может менять свои свойства, покупать продукты ещё нельзя.
        Initial,

        // Проект помечен как предстоящий, настройки проекта заморожены.
        Coming,

        // Проект в состоянии сбора инвестиций, переход на
        // следующее состояние автоматически по завершению указанного
        // количества дней (смотри 'requiredDays').
        Funding,

        // Проект собрал необходимые инвестиции и находится в процессе работы,
        // автор проекта получил деньги для реализации первого проекта и начал
        // реализовывать проект этап за этапом, получая соответствующие инвестиции,
        // инвесторы в праве голосовать за каждый следующий этап или возврат средств
        // (смотри также 'WorkStages').
        Workflow,

        // Проект завершен, в момент установки состояния замораживается список доставки
        // и владельцы находятся в ожидании получения готовой продукции.
        SuccessDone,

        // Проект не собрал необходимые инвестиции и деньги вернулись инвесторам
        FundingFail,

        // На одном из этапов проект был оценен инвесторами как провальный,
        // инвесторы получили оставшиеся деньги назад, проект закрылся
        WorkFail
    }

    /**
     * @notice Текущее состояние проекта.
     * Смена состояния происходит не мгновенно по причине особенностей
     * работы Ethereum, однако это не влияет на логику работы контракта.
     **/
    States public state = States.Initial;

    /**
     * @notice Состояние проекта изменено.
     * Смена состояния происходит не мгновенно по причине особенностей
     * работы Ethereum, однако это не влияет на логику работы контракта.
     * @param state Состояние.
     **/
    event StateChanged(States indexed state);

    /**
     * @notice Проект помечен как скоро стартующий.
     **/
    event ProjectIsComing();

    /**
     * @notice Проект начал собирать инвестиции.
     * @param time Время завершения сбора инвестиций в виде UNIX-таймштампа.
     **/
    event StartFunding(uint indexed time);

    /**
     * @notice Проект успешно завершен.
     **/
    event ProjectSuccessDone();

    /**
     * @notice Разрешаем исполнять метод только в указанном состоянии.
     * @param _state Состояние.
     **/
    modifier onlyState(States _state) {
        require(state == _state);
        _;
    }

    /**
     * @notice Перевести проект в состояние 'Coming'
     * и заблокировать возможность внесения изменений.
     **/
    function markAsComingAndFreeze() public onlyState(States.Initial) onlyEngine {
        require(products.length > 0);
        require(currentWorkStagePercent == 100);

        state = States.Coming;

        ProjectIsComing();
    }

    /**
     * @notice Запустить сбор средств.
     * Остановить сбор будет нельзя. При успешном сборе проект перейдет
     * в состояние начала работ и будут начислены средства за первый этап.
     * В случае не сбора средств за необходимое время - проект будет закрыт,
     * а средства вернуться на счета инвесторов.
     **/
    function startFunding() public onlyState(States.Coming) onlyEngine {
        state = States.Funding;

        fundingEndTime = now + requiredDays * 1 days;

        StartFunding(now);
    }

    /**
     * @notice Пометить проект как завершенный. Проект должен находится
     * на последнем этапе работ. Также это означает что стартует доставка
     * готовой продукции.
     **/
    function projectDone() public onlyState(States.Workflow) onlyEngine {
        require(workStage == workStages.length - 1);

        ProjectSuccessDone();

        state = States.SuccessDone;
    }

}